; programa
; descricao
; Lorem ipsum

; Constantes com os codigos das funcoes do sistema (ver enunciado)
kbhit:    equ 0
getchar:  equ 1
gettime:  equ 2
putchar:  equ 3
putmsg:   equ 4

;------------------------------------------------------------------------------
; Definição de endereços necessários para o desenvolvimento da aplicação
;------------------------------------------------------------------------------
_APP:		equ	h0100		; inicio da APP
_SISTEMA:	equ	h0080		; area das syscall
_VARS:		equ	h400		; variáveis da aplicação
_WORDS:		equ	h500		; mensagens e tabela de palavras
_SUBROTINAS:	equ	h600		; espaco reservado para subrotinas auxiliares

org _VARS
num_carac_dig:	dw 0			; numero de caracteres digitados pelo usuario no display
tempo_inicial:	dw 0			; tempo do jogo quando começou
delta_tempo:	dw 0			; tempo de duracao do jogo
palavra_atual:	dab '        ',0	; palavra usada no jogo, sorteada no início de cada partida
palavra_dig:	dab '        ',0	; palavra digitada pelo usuário

org _WORDS
msg_iniciais: 	dab 'Wellington Espindula #00302367'
			
certo_msg:	dab ' - certo, ',0
errou_msg:	dab ' - errou, ',0
seg_msg:	dab 'seg',0
cls:		dab '                                    ',0	; visor em branco
tab_seqs:	dab 'abcdefgh'		; índice 0
		dab 'aaaaaaaa'		; índice 1 
		dab 'AAAAAAAA'		; índice 2 
		dab 'bbbbbbbb'		; índice 3 
		dab 'BBBBBBBB'		; índice 4 
		dab 'cccccccc'		; índice 5 
		dab 'CCCCCCCC'		; índice 6 
		dab 'dddddddd'		; índice 7 
		dab 'DDDDDDDD'		; índice 8 
		dab 'eeeeeeee'		; índice 9 
		dab 'EEEEEEEE'		; índice 10
		dab 'ffffffff'		; índice 11
		dab 'FFFFFFFF'		; índice 12
		dab 'gggggggg'		; índice 13
		dab 'GGGGGGGG'		; índice 14
		dab 'hhhhhhhh'		; índice 15


org _APP
inicio:	

jogo:
limpa_visor:
	MOV #putmsg, R5
	MOV #cls, R0
	MOV #0, R1
	JSR R7, _SISTEMA

limpa_variaveis_jogo:
	CLR R1
	CLR R2
	CLR R3
	CLR R4
	CLR R5
	CLR num_carac_dig
	CLR tempo_inicial
	CLR delta_tempo

limpa_palavra_dig:
	MOV #palavra_dig, R0
	CLR (R0)+
	CLR (R0)+
	CLR (R0)+
	CLR (R0)+

limpa_palavra_atual:
	MOV #palavra_atual, R0
	CLR (R0)+
	CLR (R0)+
	CLR (R0)+
	CLR (R0)+
	CLR R0

palavra_aleatoria:
	MOV #gettime, R5
	JSR R7,_SISTEMA
	AND #15, R0
	ASL R0
	ASL R0
	ASL R0

cp_palavra_transf:
	MOV #4, R3	

	ADD #tab_seqs, R0	
	MOV #palavra_atual, R1


loop_cp:
	MOV (R0)+, (R1)+
	SOB R3, loop_cp

puts:	
	MOV #putmsg, R5			; modo putmsg
	MOV #palavra_atual, R0
	MOV #0, R1			; começa a escrever na primeira posição do visor
	JSR R7, _SISTEMA

	MOV #putchar, R5
	MOV #' ', R0
	MOV #8, R1
	JSR R7, _SISTEMA
	
	MOV #putchar, R5
	MOV #':', R0
	INC R1
	JSR R7, _SISTEMA
	
	MOV #putchar, R5
	MOV #' ', R0
	INC R1
	JSR R7, _SISTEMA	
	
	MOV #putchar, R5
	MOV #'_', R0
	INC R1
	JSR R7, _SISTEMA	


inicia_entrada:
	MOV #gettime, R5
	JSR R7, _SISTEMA
	MOV R0, tempo_inicial
	
houve_entrada:
	MOV #kbhit, R5			; while (kbhit())
	JSR R7, _SISTEMA
	TST R0
	BEQ houve_entrada

trata_entrada:
	MOV #getchar, R5		; r0 = getchar()
	JSR R7, _SISTEMA


; Verifica se o caractere digitado é alfanumérico
comparacao_1:
	CMP #'0', R0			; r0 >= 48 (0)
	BGT comparacao_2

	CMP #'9', R0			; r0 <= 57 (9)
	BLT comparacao_2
	
	JMP add_carac
	
comparacao_2:
	CMP #'A', R0			; r0 >= 65 (A)
	BGT comparacao_3

	CMP #'Z', R0			; r0 <= 90 (Z)
	BLT comparacao_3

	JMP add_carac
	
comparacao_3:
	CMP #'a', R0			; r0 >= 97 (a)
	BGT carac_fora_escopo

	CMP #'z', R0			; r0 <= 122 (z)
	BLT carac_fora_escopo
	
	JMP add_carac

;Verifica se é um enter ou um backspace
carac_fora_escopo:
	CMP #8, R0			; verifica se o usuário entrou com backspace
	BEQ bkspc
	CMP #13, R0			; verifica se o usuário entrou com enter
	BEQ enter
	JMP houve_entrada

bkspc:
	; VERIFICA SE PALAVRA NÃO ESTA VAZIA	

	TST num_carac_dig, 	; num_carac_dig <= 0  
	BLE volta_entrada	; caso sim, volta para entrada do usuario
				; se não, remove caractere

	; DECREMENTA O NÚMERO DE CARACTERES DIGITADOS

	DEC num_carac_dig	; num_carac_dig--
	MOV num_carac_dig, R1 	; R1 = num_carac_dig

	; REMOVE CARACTERE DA MEMORIA
	
	MOV #palavra_dig, R2 	; R2 = end_palavra_dig
	ADD R1, R2		; i = end_palavra_dig + num_carac_dig
	AND #255, (R2)		; AND 0000000|11111111 (mascara)
				; Aplica a mascara no endereco apontado por R2
				; ou seja, aplica mascara no endereco do ultimo caractere digitado, removendo-o.

	; REMOVE CARACTERE DO DISPLAY

	MOV #putchar, R5
	MOV #0, R0
	ADD #11, R1
	JSR R7, _SISTEMA

	JMP poe_cursor

enter:
	JMP comparacao


volta_entrada:
	JMP houve_entrada

add_carac:
	MOV num_carac_dig, R1	; R1 = num_carac_dig
	CMP #8, R1		; R1 == 8 (ASCII backspace)
	BEQ volta_entrada
	MOV #palavra_dig, R2 	; R2 = end_palavra_dig
	ADD R1, R2		; i = end_palavra_dig + num_carac_dig
	MOV R0, R3
	ASL R3
	ASL R3
	ASL R3
	ASL R3
	ASL R3
	ASL R3
	ASL R3
	ASL R3			; shifta o byte do algarismo menos significativo pro byte mais significativo
	MOV (R2), R4		; R4 = palavra_dig[i]
	AND #255, R4		; AND 0000000|11111111 (mascara)
	OR R3, R4		; OR XXXXXXXX|YYYYYYYY (mascara, onde X sao os bits do caractere digitado e Y sao os bits do caractere que sucede palavra_dig[i]
	MOV R4, (R2)		; palavra_dig[i] = entrada 
				; Ou seja, move o caractere entrado para a memória

	MOV #putchar, R5	; modo putchar
	ADD #11, R1		; Inicia a digitacao na 12ª posicao do display
				; R1 =  11 + num_carac_dig
				; Isto é, adiciona o numero de caractere digitados no R1
	JSR R7, _SISTEMA

	INC num_carac_dig	; num_carac_dig++
		

poe_cursor:
	; VERIFICA SE NUMERO DE CARACTERES É MAIS QUE 8
	MOV num_carac_dig, R1	; R1 = num_carac_dig
	CMP #8, R1		; 8 - R1
	BLE volta_entrada	; R1 >= 8
	
	MOV #putchar, R5	; modo putchar
	MOV #'_', R0		; R0 = '_'
	ADD #11, R1		; Inicia a digitacao na 12ª posicao do display
				; R1 =  11 + num_carac_dig
	JSR R7, _SISTEMA

	; REMOVE POSSIVEL CURSOR
	
	MOV #putchar, R5
	MOV #0, R0
	INC R1
	JSR R7, _SISTEMA
	JMP houve_entrada


comparacao:
	MOV #palavra_atual, R1	; move endereco da palavra do jogo para R1
	MOV #palavra_dig, R2	; move endereco da palavra digitada para o R2
	MOV #4, R3		; move 4 para registrador contador de laco. ou seja, percorre laco 4x

laco_comp:			; laço de comparação, percorre as strings comparando-as
	CMP (R1)+, (R2)+	; compara os dois bytes de ambas as palavras
	BNE errou		; caso diferentes, usuário errou
	SOB R3, laco_comp	; decrementa contador e verifica se laco chegou ao fim
				; se laco chegou ao fim sem desviar para errou, entao as palavras sao iguais e o usuario acertou
				; continua no acertou
acertou:			
	MOV #certo_msg, R0	; se acertou, move acertou para R0
	BR escreve_msg		; desvia para o escreve_msg

errou:				; se errou, move errou para R0
	MOV #errou_msg, R0

escreve_msg:			; Escreve mensagem de fim se acertou ou errou
	MOV #putmsg, R5
	MOV #11, R1
	ADD num_carac_dig, R1
	JSR R7, _SISTEMA

escreve_tempo:			; escreve tempo decorrido na execucao da "partida"
	MOV #gettime, R5
	JSR R7, _SISTEMA	; pega tempo final da execucao
	SUB tempo_inicial, R0	; pega variacao de tempo
				; R0 = tempo_final (R0) - tempo_inicial
	MOV R0, delta_tempo	; delta_tempo = R0
	CMP #1000, R0		; 1000 - variacao_tempo
	BLE demorou_demais	; se (variacao_tempo >= 1000) -> demorou demais

prepara_posicao_escrita:	
	MOV num_carac_dig, R4
	ADD #23, R4		; R4 = caracteres digitados + constantes de display (palavra_atual, " : ", " - certo, ") + 2

desloca_bytes_tempo:
	; Divide o tempo por 10, para pegar o resto e exibir na tela
	MOV R0, R1		; como tempo esta no R0, move-o para R1
	CLR R0			; limpa R0
	MOV #10, R2             ; divisor
	JSR R7,_S_DIVIDIR	; realiza divisao
	
	; Imprime na tela
	MOV #putchar, R5	; modo putchar
	MOV R1, R0		; move o resto da divisao para o R0
	ADD #'0', R0		; add a constante do ASCII de '0', para representar o números como ASCII
	MOV R4, R1		; move o endereço a ser escrito no R1
	DEC R4			; decrementa o R4
	JSR R7, _SISTEMA
	
	; Testa se tem mais algum numero algarismo a ser deslocado
	TST R0
	BEQ desloca_bytes_tempo
	
escreve_seg:			; escreve seg dps de exibir o tempo (numero) em segundos
	MOV #putmsg, R5		; modo putmsg
	MOV #seg_msg, R0	; move mensagem pro R0
	ADD #3, R4		; alinha a posicao do visor
	MOV R4, R1		; 
	JSR R7, _SISTEMA	; escreve msg

	JMP fim

demorou_demais:	
	MOV #putchar, R5
	MOV #'9', R0
	MOV #29, R1
	JSR R7, _SISTEMA	
	
	MOV #putchar, R5
	INC R1
	JSR R7, _SISTEMA		

	MOV #putchar, R5
	INC R1
	JSR R7, _SISTEMA



fim:				; terminou xD
	HLT





; -------- SUBROTINAS AUXILIARES PARA O JOGO --------
org _SUBROTINAS
;>
;>
;> Dividir int. positivo de 32 bits por um de 16 bits
;>
;> Chamada da subrotina:
;>
;> MOV #msbitsdividendo,R0      ; 16 bits mais significativos do dividendo
;> MOV #lsbitsdividendo,R1      ; 16 bits menos significativos do dividendo
;> MOV #divisor,R2              ; divisor (16 bits)
;> JSR R7,_S_DIVIDIR
;>
;> No retorno da subrotina:
;> - R0 contém o quociente (16 bits)
;> - R1 contém o resto (16 bits)
;> - R2 ainda contém o divisor, inalterado (16 bits)
;> - Códigos de condição:
;>   V = 1 indica que ocorreu estouro na divisão (quociente não cabe em 16 bits)
;>   Z = 1 indica que ocorreu uma tentativa de divisão por zero
;>   Nestes dois casos, R0, R1 e R2 não são alterados pela subrotina
;>
_S_DIVIDIR:
          TST R2                ; testa divisor
          BNE __NAO_ZERO        ; se <> zero, continua
          CCC V                 ; indica divisao por zero
          RTS R7                ; retorna ao ponto de chamada

__NAO_ZERO:
          CMP R0,R2             ; testa se dividendo(msb)
                                ; e' >= que o divisor
          BCC __INDICA_ESTOURO  ; se for, indicar estouro
                                ; note: BCC equivale a um
                                ; BGE para int. positivos
;>
          MOV R3,-(R6)          ; salva R3 na pilha
          MOV R4,-(R6)          ; salva R4 na pilha
          MOV R5,-(R6)          ; salva R5 na pilha
          MOV R0,R3             ; copia dividendo para
          MOV R1,R4             ; R3 e R4 (=q no final)
          MOV #16,R5            ; inicializa contador
          ASL R4                ; desloca dividendo p/a
          ROL R3                ; esquerda e abre espaco
          BCS __SUBTRAI_DIVISOR ; p/um bit do quociente
          CMP R3,R2             ; se n+1 msbits do divid.
          BCS __BIT_ZERO        ; maiores que divisor (= BLT p/inteiros positivos)
__SUBTRAI_DIVISOR:
          SUB R2,R3             ; subtrai divisor e
          INC R4                ; ajusta bit do quociente
__BIT_ZERO:
          SOB R5,16             ; decr. R5; se <>0, repete
          MOV R3,R1             ; copia resto para R1
          MOV R4,R0             ; copia quociente p/R0
          MOV (R6)+,R5          ; restaura
          MOV (R6)+,R4          ; registradores
          MOV (R6)+,R3          ; de trabalho
          CCC V Z               ; limpa cod. de condicao
          RTS R7                ; retorna ao ponto de chamada
;>
__INDICA_ESTOURO:
          SCC V                 ; indica overflow e nao
          CCC Z                 ; divisao por zero
          RTS R7                ; retorna ao ponto de chamada


