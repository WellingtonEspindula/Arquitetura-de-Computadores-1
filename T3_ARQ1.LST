Turbo Assembler	 Version 3.2	    06/22/19 21:23:14	    Page 1
T3_ARQ1.ASM



      1				     ;************************************************************************************
      2				     ;
      3				     ; TRABALHO	3 - ARQUITETURA	DE COMPUTADORES	1
      4				     ; UNIVERSIDADE FEDERAL DO RIO GRANDE DO SUL
      5				     ;
      6				     ; Autor: Wellington Espindula (wmespindula@inf.ufrgs.br)
      7				     ; #: 00302367
      8				     ;
      9				     ; Versao: 2019.1.0
     10				     ;
     11				     ; Resumo:
     12				     ;
     13				     ;************************************************************************************
     14
     15						       assume cs:codigo,ds:dados,es:dados,ss:pilha
     16
     17				     ; CONSTANTES
     18	      =0000		     NULL	     EQU     00H ; codigo ASCII	do fim de string
     19	      =000D		     CR		     EQU     0DH ; codigo ASCII	do caractere "carriage return"
     20	      =000A		     LF		     EQU     0AH ; codigo ASCII	do caractere "line feed"
     21	      =000B		     ATR_TELA	     EQU     0BH ; fundo preto,	caractere ciano	claro
     22	      =0008		     BKSPC	     EQU     08H ; caractere ASCII "Backspace"
     23	      =001B		     ESCP	     EQU     27	 ; caractere ASCII "Escape" (tecla ESC)
     24	      =0023		     HASHTAG	     EQU     23H ; caractere ASCII "#"
     25	      =0030		     ZERO	     EQU     30H ; caractere ASCII '0'
     26	      =0039		     NOVE	     EQU     39H ; caractere ASCII '9'
     27
     28
     29				     ; definicao do segmento de	dados do programa
     30	0000			     dados    segment
     31	0000  3E 3E 3E 20 4C 65	69+  msg_ini	     db	    '>>> Leitor	de arquivo com velocidade variavel <<<', CR, LF
     32	      74 6F 72 20 64 65	20+
     33	      61 72 71 75 69 76	6F+
     34	      20 63 6F 6D 20 76	65+
     35	      6C 6F 63 69 64 61	64+
     36	      65 20 76 61 72 69	61+
     37	      76 65 6C 20 3C 3C	3C+
     38	      0D 0A
     39	0033  3E 3E 3E 20 41 75	74+  ident	     db	    '>>> Autor:	Wellington Espindula #00302367 <<<',CR,LF,LF,'$'
     40	      6F 72 3A 20 57 65	6C+
     41	      6C 69 6E 67 74 6F	6E+
     42	      20 45 73 70 69 6E	64+
     43	      75 6C 61 20 23 30	30+
     44	      33 30 32 33 36 37	20+
     45	      3C 3C 3C 0D 0A 0A	24
     46	0064  44 69 67 69 74 65	20+  msg_arq	     db	    'Digite o nome do arquivo: $'
     47	      6F 20 6E 6F 6D 65	20+
     48	      64 6F 20 61 72 71	75+
     49	      69 76 6F 3A 20 24
     50	007F  40*(??)		     arquivo	     db	    64 dup (?)
     51	00BF  0D 0A 24				     db	    CR,	LF, '$'
     52	00C2  45 72 72 6F 20 31	3A+  erro1_arq	     db	    'Erro 1: Arquivo nao encontrado',CR,LF,LF,'$'
     53	      20 41 72 71 75 69	76+
     54	      6F 20 6E 61 6F 20	65+
     55	      6E 63 6F 6E 74 72	61+
     56	      64 6F 0D 0A 0A 24
     57	00E4  45 72 72 6F 20 32	3A+  erro2_arq	     db	    'Erro 2: Caminho nao existe',CR,LF,LF,'$'
Turbo Assembler	 Version 3.2	    06/22/19 21:23:14	    Page 2
T3_ARQ1.ASM



     58	      20 43 61 6D 69 6E	68+
     59	      6F 20 6E 61 6F 20	65+
     60	      78 69 73 74 65 0D	0A+
     61	      0A 24
     62	0102  45 72 72 6F 20 33	3A+  erro3_arq	     db	    'Erro 3: Arquivos demais',CR,LF,LF,'$'
     63	      20 41 72 71 75 69	76+
     64	      6F 73 20 64 65 6D	61+
     65	      69 73 0D 0A 0A 24
     66	011D  45 72 72 6F 20 34	3A+  erro4_arq	     db	    'Erro 4: Acesso negado',CR,LF,LF,'$'
     67	      20 41 63 65 73 73	6F+
     68	      20 6E 65 67 61 64	6F+
     69	      0D 0A 0A 24
     70	0136  45 72 72 6F 20 35	3A+  erro5_tag	     db	    'Erro 5: Arquivo com "tag" invalida',CR,LF,LF,'$'
     71	      20 41 72 71 75 69	76+
     72	      6F 20 63 6F 6D 20	22+
     73	      74 61 67 22 20 69	6E+
     74	      76 61 6C 69 64 61	0D+
     75	      0A 0A 24
     76	015C  ????		     handler	     dw	    ?
     77	015E  80*(??)		     buffer	     db	    128	dup (?)
     78	01DE  46 45 49 54 4F 4F	4F+  feito	     db	    'FEITOOOO!!',CR,LF,LF,'$'
     79	      4F 21 21 0D 0A 0A	24
     80	01EC  00		     ticks	     db	     0
     81	01ED  00		     tempo_i	     db	     0
     82	01EE			     dados    ends
     83
     84				     ; definicao do segmento de	pilha do programa
     85	0000			     pilha    segment stack ; permite inicializacao automatica de SS:SP
     86	0000  80*(4040)			      dw     128 dup('@@')
     87	0100			     pilha    ends
     88
     89				     ; definicao do segmento de	codigo do programa
     90	0000			     codigo   segment
     91
     92	0000			     inicio:  ;	CS e IP	sao inicializados com este endereco
     93	0000  B8 0000s			      mov    ax,dados ;	inicializa DS
     94	0003  8E D8			      mov    ds,ax    ;	com endereco do	segmento DADOS
     95	0005  8E C0			      mov    es,ax    ;	idem em	ES
     96				     ; fim da carga inicial dos	registradores de segmento
     97
     98				     ; inicio do programa
     99	0007			     programa:
    100	0007  E8 00DB			     call    cls	     ; limpa a tela
    101	000A  BA 0000r			     lea     dx, msg_ini     ; escreve mensagens iniciais
    102	000D  E8 00F0			     call    write
    103
    104	0010  C6 06 01ECr 00		     mov     ticks, 00H	     ; zera o tempo
    105
    106	0015			     abre_arquivo:
    107	0015  BA 0064r			     lea     dx, msg_arq
    108	0018  E8 00E5			     call    write
    109	001B  BF 007Fr			     lea     di, arquivo
    110	001E  E8 00F4			     call    gets
    111	0021  BA 007Fr			     lea     dx, arquivo
    112	0024  E8 013D			     call    file_open
    113	0027  72 06			     jc	     erro_abrir_arquivo
    114	0029  A3 015Cr			     mov     handler, ax
Turbo Assembler	 Version 3.2	    06/22/19 21:23:14	    Page 3
T3_ARQ1.ASM



    115	002C  EB 2F 90			     jmp     arquivo_aberto
    116
    117	002F			     erro_abrir_arquivo:	     ; aqui trata o erro na abertura de	arquivo
    118				     ; Verifica	tipo de	erro de	abertura de arquivo
    119	002F  3D 0002			     cmp     ax,2
    120	0032  74 0F			     je	     erro1
    121	0034  3D 0003			     cmp     ax,3
    122	0037  74 10			     je	     erro2
    123	0039  3D 0004			     cmp     ax,4
    124	003C  74 11			     je	     erro3
    125	003E  3D 0005			     cmp     ax,5
    126	0041  74 12			     je	     erro4
    127
    128				     ; Tipificacao das mensagens de erro
    129	0043			     erro1:			     ; file not	found
    130	0043  BA 00C2r			     lea     dx, erro1_arq
    131	0046  EB 10 90			     jmp     escreve_erro
    132	0049			     erro2:			     ; path does not exist
    133	0049  BA 00E4r			     lea     dx, erro2_arq
    134	004C  EB 0A 90			     jmp     escreve_erro
    135	004F			     erro3:			     ; no handle available (too	many files)
    136	004F  BA 0102r			     lea     dx, erro3_arq
    137	0052  EB 04 90			     jmp     escreve_erro
    138	0055			     erro4:			     ; access denied
    139	0055  BA 011Dr			     lea     dx, erro4_arq
    140	0058			     escreve_erro:		     ; escreve mensagem	de erros
    141	0058  E8 00A5			     call    write
    142	005B  EB B8			     jmp     abre_arquivo
    143
    144
    145	005D			     arquivo_aberto:
    146	005D  E8 0085			     call    cls	     ; limpa a tela antes de comecar a exibir o	arquivo
    147
    148	0060			     loop_leitura:
    149	0060  B4 00			     mov     ah, 00h
    150	0062  CD 1A			     int     1ah		 ; chama o gettime do DOS
    151	0064  88 16 01EDr		     mov     tempo_i, dl	 ; salva o tempo inicial
    152
    153	0068  8B 1E 015Cr		     mov     bx, handler     ; passa o handler como parametro pelo reg BX
    154	006C  BA 015Er			     lea     dx, buffer	     ; passa o buffer como param pelo reg DX
    155	006F  E8 0093			     call    fgetc	     ; file getchar
    156
    157	0072  3B C1			     cmp     ax,cx
    158	0074  75 63			     jne     fim
    159
    160	0076  80 3E 015Er 23		     cmp     buffer, HASHTAG	 ;tempo	verifica se tem	'#'
    161	007B  74 09			     je	     mudanca_tempo   ; se sim, muda o tempo de espera para digitar cada	caractere
    162
    163					     ; mov     ax, 97	    ; passa o tempo como parametro para	espera_tempo
    164					     ; mov     dl, tempo_i     ; passa o tempo inicial como parametro
    165					     ; call    espera_tempo    ; espera...
    166
    167	007D  8A 16 015Er		     mov     dl, buffer
    168	0081  E8 0089			     call    putch	     ; putchar
    169
    170	0084  EB DA			     jmp     loop_leitura
    171
Turbo Assembler	 Version 3.2	    06/22/19 21:23:14	    Page 4
T3_ARQ1.ASM



    172				     ; TODO -> pegar o tempo e mudar a variavel	de contagem
    173	0086			     mudanca_tempo:
    174	0086			     primeiro_caractere:
    175	0086  8B 1E 015Cr		     mov     bx, handler     ; passa o handler como parametro pelo reg BX
    176	008A  BA 015Er			     lea     dx, buffer	     ; passa o buffer como param pelo reg DX
    177	008D  E8 0075			     call    fgetc	     ; file getchar
    178	0090  8A 16 015Er		     mov     dl, buffer	     ; busca o caractere retornado pelo	fgetc e	move pro reg DL
    179
    180				     ; Verifica	se caractere esta entre	0-9
    181	0094			     valida_int_1:
    182				     ; (char < '0') && (char > '9') -> caractere invalido
    183	0094  80 FA 30			     cmp     dl, ZERO
    184	0097  7C 08			     jl	     erro5
    185	0099  80 FA 39			     cmp     dl, NOVE
    186	009C  7F 03			     jg	     erro5
    187
    188	009E  EB 0A 90			     jmp     add_primer_carac
    189
    190	00A1			     erro5:			     ; tag invalida
    191	00A1  BA 0136r			     lea     dx, erro5_tag
    192	00A4  E8 0059			     call    write
    193	00A7  EB 30 90			     jmp     fim
    194
    195	00AA			     add_primer_carac:
    196	00AA  80 EA 30			     sub     dl, ZERO	     ; tranforma numero	(ASCII)	em inteiro
    197	00AD  8A C4			     mov     al, AH
    198	00AF  F6 E2			     mul     dl		     ; multiplica por 10
    199	00B1  88 16 01ECr		     mov     ticks, dl
    200
    201	00B5			     segundo_caractere:
    202	00B5  8B 1E 015Cr		     mov     bx, handler     ; passa o handler como parametro pelo reg BX
    203	00B9  BA 015Er			     lea     dx, buffer	     ; passa o buffer como param pelo reg DX
    204	00BC  E8 0046			     call    fgetc	     ; file getchar
    205	00BF  8A 16 015Er		     mov     dl, buffer	     ; busca o caractere retornado pelo	fgetc e	move pro reg DL
    206
    207				     ; Verifica	se caractere esta entre	0-9
    208	00C3			     valida_int_2:
    209				     ; (char < '0') && (char > '9') -> caractere invalido
    210	00C3  80 FA 30			     cmp     dl, ZERO
    211	00C6  7C D9			     jl	     erro5
    212	00C8  80 FA 39			     cmp     dl, NOVE
    213	00CB  7F D4			     jg	     erro5
    214	00CD  EB 01 90			     jmp     add_segund_carac
    215
    216
    217	00D0			     add_segund_carac:
    218	00D0  80 EA 30			     sub     dl, ZERO	      ;	tranforma numero (ASCII) em inteiro
    219	00D3  00 16 01ECr		     add     ticks, dl
    220
    221					     ; REMOVER
    222					     ; Testes
    223					     ; mov     dl, ticks
    224					     ; call    putch
    225
    226	00D7  EB 87			     jmp     loop_leitura
    227
    228
Turbo Assembler	 Version 3.2	    06/22/19 21:23:14	    Page 5
T3_ARQ1.ASM



    229
    230
    231
    232
    233				     ; retorno ao DOS com codigo de retorno 0 no AL (fim normal)
    234	00D9			     fim:
    235	00D9  8B 1E 015Cr		      mov    bx, handler
    236	00DD  E8 008B			      call   file_close
    237	00E0  B8 4C00			      mov    ax,4c00h		; funcao retornar ao DOS no AH
    238	00E3  CD 21			      int    21h		; chamada do DOS
    239
    240
    241
    242
    243
    244				     ; --------------------- SUBROTIRNAS -----------------------
    245
    246				     ; Subrotina que limpa a tela e move cursor	pro inicio (0,0)
    247	00E5			     cls     proc
    248				     ; limpa a tela usando atributos de	tela definidos aqui
    249	00E5			     limpa_tela:
    250	00E5  B5 00			      mov     ch,0	   ; linha zero	 - canto superior esquerdo
    251	00E7  B1 00			      mov     cl,0	   ; coluna zero - da janela
    252	00E9  B6 18			      mov     dh,24	   ; linha 24	 - canto inferior direito
    253	00EB  B2 4F			      mov     dl,79	   ; coluna 79	 - da janela
    254	00ED  B7 0B			      mov     bh,ATR_TELA  ; atributo de preenchimento
    255	00EF  B0 00			      mov     al,0	   ; numero de linhas (zero = toda a janela)
    256	00F1  B4 06			      mov     ah,6	   ; rola janela para cima
    257	00F3  CD 10			      int     10h	   ; chamada BIOS (video)
    258
    259				     ; posiciona cursor	no canto superior esquerdo
    260	00F5			     posiciona_cursor:
    261	00F5  B6 00			      mov     dh,0	   ; linha zero
    262	00F7  B2 00			      mov     dl,0	   ; coluna zero
    263	00F9  B7 00			      mov     bh,0	   ; numero da pagina (zero = primeira)
    264	00FB  B4 02			      mov     ah,2	   ; define posicao do cursor
    265	00FD  CD 10			      int     10h	   ; chamada BIOS (video)
    266	00FF  C3			      ret
    267	0100			     cls     endp
    268
    269	0100			     write   proc
    270				     ; supoe que dx aponta para	a mensagem
    271	0100  B4 09			      mov    ah,9		; funcao exibir	mensagem no AH
    272	0102  CD 21			      int    21h		; chamada do DOS
    273	0104  C3			      ret
    274	0105			     write   endp
    275
    276				     ; Recebe file handler no BX e recebe ponteiro pro buffer no DX
    277				     ; Retorna caractere lido no reg DL
    278	0105			     fgetc   proc
    279	0105  B4 3F			      mov ah,3fh		 ; le um caractere do arquivo
    280	0107  B9 0001			      mov cx,1
    281	010A  CD 21			      int 21h
    282	010C  C3			      ret
    283	010D			     fgetc   endp
    284
    285
Turbo Assembler	 Version 3.2	    06/22/19 21:23:14	    Page 6
T3_ARQ1.ASM



    286				     ; Recebe caractere	no DL
    287	010D			     putch   proc
    288	010D  B8 0000			      mov ax,0
    289	0110  B4 02			      mov ah,2
    290	0112  CD 21			      int 21h
    291	0114  C3			      ret
    292	0115			     putch   endp
    293
    294				     ; Subrotina que recebe string do teclado
    295				     ; Recebe o	endereco onde a	string sera armazenada no registrador SI
    296	0115			     gets    proc
    297	0115  ????		     end_str	 dw	 ?
    298
    299	0117  2E: 89 3E	0115r		      mov    end_str, di	 ; copia o endereco da string
    300	011C			     entrada:
    301	011C  B4 01			      mov    ah,1
    302	011E  CD 21			      int    21h		; le um	caractere com eco
    303
    304	0120  3C 1B			      cmp    al,ESCP		; compara com ESCAPE (tecla ESC)
    305	0122  75 03			      jne    valida_enter
    306	0124  EB 38 90			      jmp    terminar
    307
    308	0127			     valida_enter:
    309	0127  3C 0D			      cmp    al,CR		; compara com carriage return (tecla ENTER)
    310	0129  74 27			      je     continua
    311
    312	012B			     valida_bksp:
    313	012B  3C 08			      cmp    al,BKSPC		; compara com 'backspace'
    314	012D  74 05			      je     backspace
    315
    316	012F  88 05			      mov    [di],al		; coloca caractere lido	no buffer
    317	0131  47			      inc    di
    318	0132  EB E8			      jmp    entrada
    319
    320	0134			     backspace:
    321	0134  2E: 3B 3E	0115r		      cmp    di,end_str
    322	0139  75 08			      jne    adiante
    323	013B  B2 20			      mov    dl,' '		 ; avanca cursor na tela
    324	013D  B4 02			      mov    ah,2
    325	013F  CD 21			      int    21h
    326	0141  EB D9			      jmp    entrada
    327	0143			     adiante:
    328	0143  B2 20			      mov    dl,' '		 ; apaga ultimo	caractere digitado
    329	0145  B4 02			      mov    ah,2
    330	0147  CD 21			      int    21h
    331	0149  B2 08			      mov    dl,BKSPC		 ; recua cusor na tela
    332	014B  B4 02			      mov    ah,2
    333	014D  CD 21			      int    21h
    334	014F  4F			      dec    di
    335	0150  EB CA			      jmp    entrada
    336
    337	0152			     continua:
    338	0152  C6 05 00			      mov    byte ptr [di],0	 ; forma string	ASCIIZ com o nome do arquivo
    339	0155  B2 0A			      mov    dl,LF		 ; escreve LF na tela
    340	0157  B4 02			      mov    ah,2
    341	0159  CD 21			      int    21h
    342	015B  EB 06 90			      jmp    retorna
Turbo Assembler	 Version 3.2	    06/22/19 21:23:14	    Page 7
T3_ARQ1.ASM



    343
    344	015E			     terminar:
    345	015E  B8 4C00			      mov    ax,4c00h		 ; funcao retornar ao DOS no AH
    346									 ; codigo de retorno 0 no AL
    347	0161  CD 21			      int    21h		 ; chamada do DOS
    348
    349	0163			     retorna:
    350	0163  C3			      ret
    351	0164			     gets    endp
    352
    353				     ; Abre arquivo para leitura
    354				     ; TODO -> Comentario
    355	0164			     file_open	     proc
    356	0164  B4 3D			      mov    ah,3dh
    357	0166  B0 00			      mov    al,0
    358	0168  CD 21			      int    21h
    359
    360	016A  C3			      ret
    361	016B			     file_open	     endp
    362
    363	016B			     file_close	     proc
    364	016B  B4 3E			      mov ah,3eh		 ; fecha arquivo
    365	016D  CD 21			      int 21h
    366
    367	016F  C3			      ret
    368	0170			     file_close	     endp
    369
    370	0170			     espera_tecla    proc
    371	0170  B4 00			      mov    ah,0		; funcao esperar tecla no AH
    372	0172  CD 16			      int    16h		; chamada do DOS
    373	0174  C3			      ret
    374	0175			     espera_tecla    endp
    375
    376				     ; Recebe tempo (em	ticks) no registrador AL
    377				     ; Recebe tempo inicialtempo_inicial no registrador	DL
    378	0175			     espera_tempo    proc
    379
    380				     ; -- variaveis locais
    381	0175  00		     ticks_local     db	     0
    382	0176  00		     tempo_i_local   db	     0
    383
    384				     ; antes de	entrar no loop
    385	0177			     pre_loop:
    386	0177  2E: A2 0175r		     mov     ticks_local, al	     ; salva o numero de ticks
    387	017B  2E: 88 16	0176r		     mov     tempo_i_local, dl	     ; salva o tempo inicial
    388
    389	0180			     loop_espera:
    390	0180  B4 00			     mov     ah, 00h
    391	0182  CD 1A			     int     1ah		 ; chama o gettime do DOS
    392	0184  2E: 2A 16	0176r		     sub     dl, tempo_i_local	 ; dl <- tempo_final (dl) - tempo_inicial
    393
    394	0189  38 16 01ECr		     cmp     ticks, dl		 ;
    395	018D  7E 02			     jle     retorna_espera	 ; ticks <= delta(tempo) -> retorna
    396	018F  EB EF			     jmp     loop_espera
    397
    398	0191			     retorna_espera:
    399	0191  C3			     ret
Turbo Assembler	 Version 3.2	    06/22/19 21:23:14	    Page 8
T3_ARQ1.ASM



    400	0192			     espera_tempo endp
    401
    402				     ; Verifica	se a string esta vazia
    403				     ; TODO
    404	0192			     str_empty	     proc
    405	0192  C3			     ret
    406	0193			     str_empty	     endp
    407
    408
    409	0193			     codigo   ends
    410
    411				     ; a diretiva a seguir indica o fim	do codigo fonte	(ultima	linha do arquivo)
    412				     ; e informa que o programa	deve comecar a execucao	no rotulo "inicio"
    413					      end    inicio
Turbo Assembler	 Version 3.2	    06/22/19 21:23:14	    Page 9
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "06/22/19"
??FILENAME			  Text	 "T3_ARQ1 "
??TIME				  Text	 "21:23:14"
??VERSION			  Number 0314
@CPU				  Text	 0101H
@CURSEG				  Text	 CODIGO
@FILENAME			  Text	 T3_ARQ1
@WORDSIZE			  Text	 2
ABRE_ARQUIVO			  Near	 CODIGO:0015
ADD_PRIMER_CARAC		  Near	 CODIGO:00AA
ADD_SEGUND_CARAC		  Near	 CODIGO:00D0
ADIANTE				  Near	 CODIGO:0143
ARQUIVO				  Byte	 DADOS:007F
ARQUIVO_ABERTO			  Near	 CODIGO:005D
ATR_TELA			  Number 000B
BACKSPACE			  Near	 CODIGO:0134
BKSPC				  Number 0008
BUFFER				  Byte	 DADOS:015E
CLS				  Near	 CODIGO:00E5
CONTINUA			  Near	 CODIGO:0152
CR				  Number 000D
END_STR				  Word	 CODIGO:0115
ENTRADA				  Near	 CODIGO:011C
ERRO1				  Near	 CODIGO:0043
ERRO1_ARQ			  Byte	 DADOS:00C2
ERRO2				  Near	 CODIGO:0049
ERRO2_ARQ			  Byte	 DADOS:00E4
ERRO3				  Near	 CODIGO:004F
ERRO3_ARQ			  Byte	 DADOS:0102
ERRO4				  Near	 CODIGO:0055
ERRO4_ARQ			  Byte	 DADOS:011D
ERRO5				  Near	 CODIGO:00A1
ERRO5_TAG			  Byte	 DADOS:0136
ERRO_ABRIR_ARQUIVO		  Near	 CODIGO:002F
ESCP				  Number 001B
ESCREVE_ERRO			  Near	 CODIGO:0058
ESPERA_TECLA			  Near	 CODIGO:0170
ESPERA_TEMPO			  Near	 CODIGO:0175
FEITO				  Byte	 DADOS:01DE
FGETC				  Near	 CODIGO:0105
FILE_CLOSE			  Near	 CODIGO:016B
FILE_OPEN			  Near	 CODIGO:0164
FIM				  Near	 CODIGO:00D9
GETS				  Near	 CODIGO:0115
HANDLER				  Word	 DADOS:015C
HASHTAG				  Number 0023
IDENT				  Byte	 DADOS:0033
INICIO				  Near	 CODIGO:0000
LF				  Number 000A
LIMPA_TELA			  Near	 CODIGO:00E5
LOOP_ESPERA			  Near	 CODIGO:0180
LOOP_LEITURA			  Near	 CODIGO:0060
MSG_ARQ				  Byte	 DADOS:0064
MSG_INI				  Byte	 DADOS:0000
Turbo Assembler	 Version 3.2	    06/22/19 21:23:14	    Page 10
Symbol Table



MUDANCA_TEMPO			  Near	 CODIGO:0086
NOVE				  Number 0039
NULL				  Number 0000
POSICIONA_CURSOR		  Near	 CODIGO:00F5
PRE_LOOP			  Near	 CODIGO:0177
PRIMEIRO_CARACTERE		  Near	 CODIGO:0086
PROGRAMA			  Near	 CODIGO:0007
PUTCH				  Near	 CODIGO:010D
RETORNA				  Near	 CODIGO:0163
RETORNA_ESPERA			  Near	 CODIGO:0191
SEGUNDO_CARACTERE		  Near	 CODIGO:00B5
STR_EMPTY			  Near	 CODIGO:0192
TEMPO_I				  Byte	 DADOS:01ED
TEMPO_I_LOCAL			  Byte	 CODIGO:0176
TERMINAR			  Near	 CODIGO:015E
TICKS				  Byte	 DADOS:01EC
TICKS_LOCAL			  Byte	 CODIGO:0175
VALIDA_BKSP			  Near	 CODIGO:012B
VALIDA_ENTER			  Near	 CODIGO:0127
VALIDA_INT_1			  Near	 CODIGO:0094
VALIDA_INT_2			  Near	 CODIGO:00C3
WRITE				  Near	 CODIGO:0100
ZERO				  Number 0030

Groups & Segments		  Bit Size Align  Combine Class

CODIGO				  16  0193 Para	  none
DADOS				  16  01EE Para	  none
PILHA				  16  0100 Para	  Stack
